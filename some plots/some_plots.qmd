---
title: "Few plots"
format: html
---

```{r}
library(ggplot2)
library(gridExtra)
```

## Beta distribution
a, b $\geq 1$
```{r}
param_vals <- seq(0,1,by = 0.01)
dbeta_1_1 <- dbeta(x = param_vals, shape1 = 1, shape2 = 1)
debta_1_5 <- dbeta(x = param_vals, shape1 = 1, shape2 = 5)
debta_5_1 <- dbeta(x = param_vals, shape1 = 5, shape2 = 1)
data1 <- data.frame(param_vals, dbeta_1_1, debta_1_5, debta_5_1)

#setEPS() 
#postscript("ab_geq_1.eps")
matplot(data1[,-1], type = "l", lwd = 4, lty = 1, pch=15:17) 
legend("topleft", inset=0.01, legend=c("Beta(1,1)", "Beta(1,5)", "Beta(5,1)"),col=c("black","red", "green"), lty=1, cex=0.8)
title(main = expression("a and b " >= "1"), xlab = "Parameter values", ylab = "density")
#dev.off()
```

$a = b \geq 1$
```{r}
param_vals <- seq(0,1,by = 0.01)
dbeta_1_1 <- dbeta(x = param_vals, shape1 = 1, shape2 = 1)
debta_3_3 <- dbeta(x = param_vals, shape1 = 3, shape2 = 3)
debta_8_8 <- dbeta(x = param_vals, shape1 = 8, shape2 = 8)
data2 <- data.frame(param_vals, dbeta_1_1, debta_3_3, debta_8_8)

matplot(data2[,-1], type = "l", lwd = 4, lty = 1, pch=5:7) 
legend("topleft", inset=0.01, legend=c("Beta(1,1)", "Beta(3,3)", "Beta(8,8)"),col=c("black","red", "green"), lty=1, cex=0.8)
title(main = expression("a = b " >= "1"), xlab = "Parameter values", ylab = "density")
```

$a , b \leq 1$
```{r}
param_vals <- seq(0,1,by = 0.01)
dbeta_1_1 <- dbeta(x = param_vals, shape1 = 1, shape2 = 1)
debta_0.1_0.8 <- dbeta(x = param_vals, shape1 = 0.1, shape2 = 0.8)
debta_0.8_0.1 <- dbeta(x = param_vals, shape1 = 0.8, shape2 = 0.1)
data3 <- data.frame(param_vals, dbeta_1_1, debta_0.1_0.8, debta_0.8_0.1)

matplot(data3[,-1], type = "l", lwd = 4, lty = 1, pch=5:7) 
legend("topleft", inset=0.01, legend=c("Beta(1,1)", "Beta(0.1,0.8)", "Beta(0.8,0.1)"),col=c("black","red", "green"), lty=1, cex=0.8)
title(main = expression("a and b " <= "1"), xlab = "Parameter values", ylab = "density")
```

one of a, b is more than or equal to 1.
```{r}
param_vals <- seq(0,1,by = 0.01)
dbeta_1_1 <- dbeta(x = param_vals, shape1 = 1, shape2 = 1)
debta_0.1_3 <- dbeta(x = param_vals, shape1 = 0.1, shape2 = 3)
debta_0.1_7 <- dbeta(x = param_vals, shape1 = 0.1, shape2 = 7)
debta_3_0.1 <- dbeta(x = param_vals, shape1 = 3, shape2 = 0.1)
debta_7_0.1 <- dbeta(x = param_vals, shape1 = 7, shape2 = 0.1)
data4 <- data.frame(param_vals, dbeta_1_1, debta_0.1_3, debta_3_0.1, debta_0.1_7 ,debta_7_0.1)

matplot(data4[,-1], type = "l", lwd = 4, lty = 1, pch=1:5, ylim = c(0,2)) 
legend("topleft", inset=0.01, legend=c("Beta(1,1)", "Beta(0.1,3)", "Beta(3,0.1)", "Beta(0.1,7)", "Beta(7,0.1)"),col=c("black","red", "green", "blue", "cyan"), lty=1, cex=0.8)
title(main = expression("a or b " < "1"), xlab = "Parameter values", ylab = "density")
```


Arranging the plots using `par(mfrow = )` and save it as an image using `setEPS()`
```{r}
setEPS() 
postscript("beta_prior.eps")
par(mfrow = c(2, 2))

# plot 1
matplot(data1[,-1], type = "l", lwd = 1, lty = 1, pch=15:17, ylab = "density", xlab = "Parameter values") 
legend("top", inset=0.01, legend=c("Beta(1,1)", "Beta(1,5)", "Beta(5,1)"),col=c("black","red", "green"), lty=1, cex=0.8)
title(main = expression("a and b " >= "1"), xlab = "Parameter values", ylab = "density")

# plot 2
matplot(data2[,-1], type = "l", lwd = 1, lty = 1, pch=5:7, ylab = "density", xlab = "Parameter values") 
legend("topleft", inset=0.01, legend=c("Beta(1,1)", "Beta(3,3)", "Beta(8,8)"),col=c("black","red", "green"), lty=1, cex=0.8)
title(main = expression("a = b " >= "1"), xlab = "Parameter values", ylab = "density")

# plot 3
matplot(data3[,-1], type = "l", lwd = 1, lty = 1, pch=5:7, ylab = "density", xlab = "Parameter values") 
legend("top", inset=0.01, legend=c("Beta(1,1)", "Beta(0.1,0.8)", "Beta(0.8,0.1)"),col=c("black","red", "green"), lty=1, cex=0.8)
title(main = expression("a and b " <= "1"), xlab = "Parameter values", ylab = "density")

# plot 4
matplot(data4[,-1], type = "l", lwd = 1, lty = 1, pch=1:5, ylim = c(0,2), ylab = "density", xlab = "Parameter values") 
legend("top", inset=0.01, legend=c("Beta(1,1)", "Beta(0.1,3)", "Beta(3,0.1)", "Beta(0.1,7)", "Beta(7,0.1)"),col=c("black","red", "green", "blue", "cyan"), lty=1, cex=0.8)
title(main = expression("a or b " < "1"), xlab = "Parameter values", ylab = "density")
dev.off()
```

## Dirichlet distribution when K=3
We focus on ternery plots

```{r}
library(tidyverse)
library(ggtern)
library(reticulate)
library(MCMCpack)
```

```{r}
alpha1 <- c(1, 1, 1)  # Dirichlet parameters
alpha3 <- c(3,3,3)
alpha8 <- c(8,8,8)
N <- 500  # Number of samples

data1 <- as.data.frame(rdirichlet(N, alpha1))
data3 <- as.data.frame(rdirichlet(N, alpha3))
data8 <- as.data.frame(rdirichlet(N, alpha8))

# name the three categories
colnames(data1) <- c("Category_1", "Category_2", "Category_3") 
colnames(data3) <- c("Category_1", "Category_2", "Category_3")
colnames(data8) <- c("Category_1", "Category_2", "Category_3")

# Create a ternary plot
ggtern(mapping = aes(x = Category_1, y = Category_2, z = Category_3)) +
        geom_point(data = data1, color = "red") +
        geom_point(data = data3, color = "blue") +
        geom_point(data = data8, color = "yellow")    
```

```{r}
data1 %>%            # dataset we want to reshape
  pivot_longer(             # we want to inc rows and dec cols
    cols = !religion,       # which cols to reshape
    names_to = "income",    # name of the var under which above col names will go
    values_to = "count"     # name of the variable for cell values
  )
```


```{r}
library(plotly)
```

```{r}
# Parameters for the Dirichlet distribution
alpha <- c(2, 5, 3)

# Generate samples
samples <- MCMCpack::rdirichlet(1000, alpha)

# Convert samples to a data frame
df <- as.data.frame(samples)
colnames(df) <- c("A", "B", "C")

# Create a ternary plot
fig <- plot_ly(df, type = 'scatterternary', mode = 'markers',
               a = ~A, b = ~B, c = ~C,
               marker = list(symbol = 100, size = 5, color = ~A))

fig <- fig %>% layout(title = "Dirichlet Distribution Ternary Plot",
                      ternary = list(
                        sum = 1,
                        aaxis = list(title = "A"),
                        baxis = list(title = "B"),
                        caxis = list(title = "C")
                      ))

fig
```


```{r}
alpha1 <- c(1, 1, 1)  # Dirichlet parameters
alpha3 <- c(3,3,3)
alpha8 <- c(8,8,8)

samples1 <- MCMCpack::rdirichlet(1000, alpha1)
samples3 <- MCMCpack::rdirichlet(1000, alpha3)
samples8 <- MCMCpack::rdirichlet(1000, alpha8)

samples1 <- cbind(samples1, rep("alpha = 1", nrow(samples1)))
samples3 <- cbind(samples3, rep("alpha = 3", nrow(samples3)))
samples8 <- cbind(samples8, rep("alpha = 8", nrow(samples8)))

df_samples <- data.frame(rbind(samples1, samples3, samples8))
colnames(df_samples) = c("rho_1", "rho_2", "rho_3", "alpha")
df_samples$alpha = as.factor(df_samples$alpha)

my_palette <- c("#BB165A", "#2A5CCE", "#CBF45C")

fig1 <- plot_ly(df_samples, type = 'scatterternary', mode = 'markers',
               a = ~rho_1, b = ~rho_2, c = ~rho_3,
               marker = list(symbol = 15, size = 5), color = ~alpha, colors = my_palette)


fig1 <- fig1 %>% layout(title = TeX("Dir(\\alpha, \\alpha, \\alpha)"),
                      ternary = list(
                        sum = 1,
                        aaxis = list(title = "Category 1"),
                        baxis = list(title = "Category 2"),
                        caxis = list(title = "Category 3")
                      )) %>% 
      config(mathjax = 'cdn')


fig1                     
````


```{r}
alpha_1 <- c(10, 3, 2)  # Dirichlet parameters
alpha_2 <- c(3,9,1)
alpha_3 <- c(1,3,8)

samples_1 <- MCMCpack::rdirichlet(1000, alpha_1)
samples_2 <- MCMCpack::rdirichlet(1000, alpha_2)
samples_3 <- MCMCpack::rdirichlet(1000, alpha_3)

samples_1 <- cbind(samples_1, rep("alpha = (10, 3, 2)", nrow(samples_1)))
samples_2 <- cbind(samples_2, rep("alpha = (3,9,1)", nrow(samples_2)))
samples_3 <- cbind(samples_3, rep("alpha = (1,3,8)", nrow(samples_3)))

df_all_samples <- data.frame(rbind(samples_1, samples_2, samples_3))
colnames(df_all_samples) = c("rho_1", "rho_2", "rho_3", "alpha")
df_all_samples$alpha = as.factor(df_all_samples$alpha)

my_palette <- c("#BB165A", "#2A5CCE", "#CBF45C")

fig2 <- plot_ly(df_all_samples, type = 'scatterternary', mode = 'markers',
               a = ~rho_1, b = ~rho_2, c = ~rho_3,
               marker = list(symbol = 15, size = 5), color = ~alpha, colors = my_palette)


fig2 <- fig2 %>% layout(title = TeX("Dir(\\alpha_1, \\alpha_2, \\alpha_3)"),
                      ternary = list(
                        sum = 1,
                        aaxis = list(title = "Category 1"),
                        baxis = list(title = "Category 2"),
                        caxis = list(title = "Category 3")
                      )) %>% 
      config(mathjax = 'cdn')


fig2    

````



```{r}
if (!require("processx")) install.packages("processx")
```

```{r}
kaleido(fig1, "ternery1.svg")
```

